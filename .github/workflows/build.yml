name: Build and Release

on:
  push:
    branches: 
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '버전 (예: 1.0.1)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Prepare icon files
      run: |
        echo "아이콘 파일 준비 중..."
        python create_icon.py
        copy icon.ico tray_icon.ico
        if not exist tray_icon.png (
          echo "경고: tray_icon.png 생성 실패, 대체 파일 생성"
          python -c "from PIL import Image, ImageDraw; icon = Image.new('RGBA', (64, 64), (255, 0, 0, 255)); draw = ImageDraw.Draw(icon); draw.text((15, 15), 'AI', fill=(255, 255, 255)); icon.save('tray_icon.png')"
        )
        dir
      shell: cmd
    
    - name: Get Current Version
      id: current_version
      shell: pwsh
      run: |
        $version = ""
        if ("${{ github.event.inputs.version }}" -ne "") {
          # 수동 입력한 버전이 있는 경우
          $version = "${{ github.event.inputs.version }}"
        } elseif ("${{ github.ref }}" -match "refs/tags/v(.*)") {
          # 태그가 있는 경우
          $version = $Matches[1]
        } else {
          # 태그가 없는 경우, 기존 버전에서 마이너 버전 증가
          $content = Get-Content ai_block_tray.py -Raw
          if ($content -match 'VERSION\s*=\s*"(\d+\.\d+\.\d+)"') {
            $oldVersion = $Matches[1]
            $versionParts = $oldVersion -split '\.'
            $versionParts[2] = [int]$versionParts[2] + 1
            $version = [string]::Join('.', $versionParts)
          } else {
            $version = "1.0.0"
          }
        }
        echo "::set-output name=version::$version"
        
    - name: Update Version in Files
      shell: pwsh
      run: |
        $version = "${{ steps.current_version.outputs.version }}"
        
        # ai_block_tray.py 업데이트
        $content = Get-Content ai_block_tray.py -Raw
        $content = $content -replace 'VERSION\s*=\s*"(\d+\.\d+\.\d+)"', "VERSION = `"$version`""
        Set-Content -Path ai_block_tray.py -Value $content
        
        # installer.iss 업데이트
        $content = Get-Content installer.iss -Raw
        $content = $content -replace '#define MyAppVersion "(\d+\.\d+\.\d+)"', "#define MyAppVersion `"$version`""
        Set-Content -Path installer.iss -Value $content
        
        Write-Host "버전이 $version 으로 업데이트되었습니다."
        
    - name: Check required files
      run: |
        echo "필수 파일 확인 중..."
        dir
        if not exist tray_icon.png (
          echo "오류: tray_icon.png 파일이 없습니다. 생성합니다."
          python -c "from PIL import Image, ImageDraw; icon = Image.new('RGBA', (64, 64), (255, 0, 0, 255)); draw = ImageDraw.Draw(icon); draw.text((15, 15), 'AI', fill=(255, 255, 255)); icon.save('tray_icon.png')"
        )
        if not exist ai_block_config.json (
          echo "오류: ai_block_config.json 파일이 없습니다. 생성합니다."
          python -c "import json; config = {'ADMIN_PASSWORD': 'nobak', 'MASTER_PASSWORD': 'zynesa', 'DEVELOPER_MODE': True, 'DEBUG_MODE': True, 'LOCK_DURATION': 300, 'MAX_FAIL': 5, 'AUTO_BLOCK_INTERVAL': 60, 'NOTIFICATION_DURATION': 3000, 'HOSTS_PATH': 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts', 'BLOCK_MARK': '# --- AI SITES BLOCK START ---', 'UNBLOCK_MARK': '# --- AI SITES BLOCK END ---', 'ICON_PATH': 'tray_icon.png', 'UPDATE_URL': 'https://api.github.com/repos/zynesa/aiblock/releases/latest', 'UPDATE_CHECK_INTERVAL': 3600, 'LAST_UPDATE_CHECK': 0, 'AUTO_UPDATE': True}; open('ai_block_config.json', 'w').write(json.dumps(config, indent=4))"
        )
      shell: cmd
        
    - name: Build with PyInstaller
      run: |
        try {
          pyinstaller --noconfirm --onedir --windowed --icon=tray_icon.ico --add-data "tray_icon.png;." --add-data "ai_block_config.json;." ai_block_tray.py
        }
        catch {
          Write-Host "PyInstaller에서 오류 발생: $_"
          Write-Host "파일 목록 확인:"
          Get-ChildItem -Force
          Exit 1
        }
      shell: pwsh
        
    - name: Create ZIP archive
      run: |
        if (Test-Path ".\dist\ai_block_tray") {
          Compress-Archive -Path .\dist\ai_block_tray\* -DestinationPath .\ai_block_windows.zip
          Get-ChildItem .\ai_block_windows.zip
        } else {
          Write-Host "오류: dist\ai_block_tray 폴더가 존재하지 않습니다."
          Get-ChildItem .\dist -Recurse
          # 수동 ZIP 생성
          New-Item -ItemType Directory -Force -Path .\dist\ai_block_tray
          Copy-Item *.py .\dist\ai_block_tray\
          Copy-Item *.ico .\dist\ai_block_tray\
          Copy-Item *.png .\dist\ai_block_tray\
          Copy-Item *.json .\dist\ai_block_tray\
          Compress-Archive -Path .\dist\ai_block_tray\* -DestinationPath .\ai_block_windows.zip
        }
      shell: pwsh
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: AI Block v${{ steps.current_version.outputs.version }}
        tag_name: v${{ steps.current_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          ai_block_windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Commit Version Changes
      if: github.ref == 'refs/heads/master' && github.event.inputs.version == ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ai_block_tray.py installer.iss
        git commit -m "버전 업데이트: ${{ steps.current_version.outputs.version }}"
        git tag -a v${{ steps.current_version.outputs.version }} -m "버전 ${{ steps.current_version.outputs.version }} 릴리스"
        
    - name: Push Changes
      if: github.ref == 'refs/heads/master' && github.event.inputs.version == ''
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: master
        tags: true 